/*
 * Copyright (c) 2006, Swedish Institute of Computer Science.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This file is part of the Contiki operating system.
 *
 */

/**
 * \file
 *         A very simple Contiki application showing how Contiki programs look
 * \author
 *         Adam Dunkels <adam@sics.se>
 */

#include "contiki.h"

#include <stdio.h> /* For printf() */

#include "dev/leds.h"
#include "dev/button-sensor.h"
#include "board.h"
#include "ti-lib.h"
#include "board-i2c.c"

#include "sys/ctimer.h"
#include "sys/etimer.h"

#define BUTTON_LEFT  &button_left_sensor
#define BUTTON_RIGHT &button_right_sensor
#define SEND_INTERVAL (CLOCK_SECOND)

#define D6T_ADDR 0x0A // Address of OMRON D6T is 0x0A in hex
#define D6T_CMD 0x4C // Standard command is 4C in hex
uint8_t         txBuffer[1];
uint8_t         rxBuffer[35];
int             temps[17];

/*---------------------------------------------------------------------------*/
PROCESS(hello_world_process, "Hello world process");
AUTOSTART_PROCESSES(&hello_world_process);
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(hello_world_process, ev, data)
{
  static struct etimer periodic_timer;
  int i;

  PROCESS_BEGIN();
  
  printf("Hello, world\n");

  board_i2c_select(BOARD_I2C_INTERFACE_0, D6T_ADDR);
  txBuffer[0] = D6T_CMD;

  printf("I2C init complete\n");

  etimer_set(&periodic_timer, SEND_INTERVAL);
  while(1){
    PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&periodic_timer));
    etimer_reset(&periodic_timer);
    board_i2c_wakeup();
    board_i2c_write_read(&txBuffer[0],1,&rxBuffer[0],35);
    //for(i=0; i<35; i++){
    //  printf("%3d ",rxBuffer[i]);
    //}
    for(i=0; i<17; i++){
      temps[i] = rxBuffer[i*2]+rxBuffer[i*2+1]*256;
    }
    printf("%3d\n",temps[0]);
    for(i=0; i<4; i++){
      printf("%3d  %3d  %3d  %3d\n",temps[i*4+1],temps[i*4+2],temps[i*4+3],temps[i*4+4]);
    }
    printf("\n");
  }
  printf("NOT REACHED\n");
  PROCESS_END();
}


void i2c_init(){
  /* First, make sure the SERIAL PD is on */
  ti_lib_prcm_power_domain_on(PRCM_DOMAIN_SERIAL);
  while((ti_lib_prcm_power_domain_status(PRCM_DOMAIN_SERIAL) != PRCM_DOMAIN_POWER_ON));

  /* Enable the clock to I2C */
  ti_lib_prcm_peripheral_run_enable(PRCM_PERIPH_I2C0);
  ti_lib_prcm_load_set();
  while(!ti_lib_prcm_load_get());

  /* Enable and initialize the I2C master module */
  //ti_lib_i2c_master_init_exp_clk(I2C0_BASE, ti_lib_sys_ctrl_clock_get(),false);

  ti_lib_i2c_master_disable(I2C0_BASE);

  //ti_lib_ioc_io_port_pull_set(BOARD_IOID_SDA, IOC_IOPULL_UP);
  //ti_lib_ioc_io_port_pull_set(BOARD_IOID_SCL, IOC_IOPULL_UP);
  ti_lib_ioc_pin_type_i2c(I2C0_BASE, BOARD_IOID_SDA, BOARD_IOID_SCL);

  //ti_lib_i2c_master_init_exp_clk(I2C0_BASE, ti_lib_sys_ctrl_clock_get(), false);

  /* Enable I2C Master Block */
  uint32_t ui32SCLFreq = 100000;
  uint32_t ui32TPR;
  uint32_t ui32I2CClk = ti_lib_sys_ctrl_clock_get();
  //I2CMasterEnable(I2C0_BASE);
  // Enable the clock for the master.
  HWREGBITW(I2C0_BASE + I2C_O_MCR, I2C_MCR_MFE_BITN) = 1;
  // Enable the master block.
  HWREG(I2C0_BASE + I2C_O_MCTRL) = 0x00000010;

  ui32TPR = ((ui32I2CClk + (2 * 10 * ui32SCLFreq) - 1) / (2 * 10 * ui32SCLFreq)) - 1;
  HWREG(I2C0_BASE + I2C_O_MTPR) = ui32TPR;
}

bool i2c_transfer(uint8_t slave_addr, uint8_t *tx_buf, int tx_size, uint8_t *rx_buf, int rx_size){
  bool success;
  int i;

  /* Set slave address for write */
  //ti_lib_i2c_master_slave_addr_set(I2C0_BASE, slave_addr, false);
  HWREG(I2C0_BASE + I2C_O_MSA) = (slave_addr << 1);

  /* Write first byte */
  //ti_lib_i2c_master_data_put(I2C0_BASE, wdata[0]);
  HWREG(I2C0_BASE + I2C_O_MDR) = tx_buf[0];

  /* Check if another master has access */
  LIMITED_BUSYWAIT(ti_lib_i2c_master_bus_busy(I2C0_BASE));

  /* Assert RUN + START */
  ti_lib_i2c_master_control(I2C0_BASE, I2C_MASTER_CMD_BURST_SEND_START);
  LIMITED_BUSYWAIT(ti_lib_i2c_master_busy(I2C0_BASE));
  success = i2c_status();

  for(i = 1; i < tx_size && success; i++) {
    /* Write next byte */
    ti_lib_i2c_master_data_put(I2C0_BASE, tx_buf[i]);

    /* Clear START */
    ti_lib_i2c_master_control(I2C0_BASE, I2C_MASTER_CMD_BURST_SEND_CONT);
    LIMITED_BUSYWAIT(ti_lib_i2c_master_busy(I2C0_BASE));
    success = i2c_status();
  }
  if(!success) {
    return false;
  }

  /* Set slave address for read */
  ti_lib_i2c_master_slave_addr_set(I2C0_BASE, slave_addr, true);

  /* Assert ACK */
  ti_lib_i2c_master_control(I2C0_BASE, I2C_MASTER_CMD_BURST_RECEIVE_START);

  i = 0;
  while(i < (rx_size - 1) && success) {
    LIMITED_BUSYWAIT(ti_lib_i2c_master_busy(I2C0_BASE));
    success = i2c_status();
    if(success) {
      rx_buf[i] = ti_lib_i2c_master_data_get(I2C0_BASE);
      ti_lib_i2c_master_control(I2C0_BASE, I2C_MASTER_CMD_BURST_RECEIVE_CONT);
      i++;
    }
  }

  if(success) {
    ti_lib_i2c_master_control(I2C0_BASE, I2C_MASTER_CMD_BURST_RECEIVE_FINISH);
    LIMITED_BUSYWAIT(ti_lib_i2c_master_busy(I2C0_BASE));
    success = i2c_status();
    if(success) {
      rx_buf[rx_size - 1] = ti_lib_i2c_master_data_get(I2C0_BASE);
      LIMITED_BUSYWAIT(ti_lib_i2c_master_bus_busy(I2C0_BASE));
    }
  }

  return success;
}
/*---------------------------------------------------------------------------*/
